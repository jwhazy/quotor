// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  quotes        Quote[]
  likes         Like[]

  @@unique([id, image, name])
  @@map("users")
}

model Quote {
  id          String @id @default(cuid())
  author      User   @relation(fields: [authorId, authorImage, authorName], references: [id, image, name])
  authorId    String
  authorImage String
  authorName  String

  replyFrom   Quote?  @relation("Comments", fields: [replyFromId], references: [id])
  replyFromId String?

  comments Quote[] @relation("Comments")

  content String
  likes   Like[]

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt

  @@map("quotes")
}

model Like {
  id String @id @default(cuid())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  quote   Quote  @relation(fields: [quoteId], references: [id])
  quoteId String

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt

  @@map("likes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
